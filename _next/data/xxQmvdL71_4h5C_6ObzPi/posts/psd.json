{"pageProps":{"post":{"title":"phisolopy of software designを読んで","date":"2022-11-20T05:35:07.322Z","slug":"psd","content":"<h2 id=\"ほんとにメモを章ごとに\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#ほんとにメモを章ごとに\"><span class=\"icon icon-link\"></span></a>ほんとにメモを章ごとに</h2>\n<ul>\n<li>deepなモジュールを心がけろや、コメントあたりはためになった。</li>\n<li>英語は比較的平易</li>\n</ul>\n<p>9 分けるべきかわけ無いべきかべきか</p>\n<p>分けると複雑性を生む場合がある</p>\n<p>クラス、インターフェースの数が多いと複雑性がます</p>\n<p>同時に見れなくなる。最悪認識できない</p>\n<p>コードの重複を生む</p>\n<p>関連があるかどうか</p>\n<p>情報を共有している</p>\n<p>相互的に同時に使われる</p>\n<p>一方通行なら分けるべき</p>\n<p>概念が似ている</p>\n<p>文字列検索と大文字小文字変換</p>\n<p>まとめてみたいと理解できない一連のコード</p>\n<p>9.1 まとめて情報を共有する。</p>\n<p>9.2 インターフェースがシンプルになるなら、まとめる。まとめなかった時の知識がなくても使えるようになる</p>\n<p>9.3 重複をまとめる</p>\n<p>メソッドの呼び出しを巣にペットにする</p>\n<p>9.4 汎用的なものと特化的なものを分ける</p>\n<p>9.8 methodがdeepならより</p>\n<p>　　親子関係だが相互を読む必要がない分割が良い</p>\n<p>10</p>\n<p>Erroの発生場所を抑えろ</p>\n<p>問題ないならエラーをレイズしない</p>\n<p>エラーに気づかないようにする。リトライ</p>\n<p>Errorを汎用的にトップレベルにまとめる</p>\n<p>クラッシュとは</p>\n<p>特殊系のハンドリング</p>\n<p>文字のセレクト機能</p>\n<p>no selectという状態を持つのではなく、selectのstartとendが同じとすれば、特殊系を考慮しなくて良い設計となる。</p>\n<p>何を知るべきか、隠すべきか考える</p>\n<p>11　複数の選択肢を検討し、デザインしろ。interface,impl共に</p>\n<p>12  comment</p>\n<p>良いコードはドキュメントになるは嘘</p>\n<p>抽象、deepなモジュールにはコメントは効果的な役割がある。ユーザーが使うとき、実装のときである。</p>\n<p>cognitive load,unknown unknownを減らす</p>\n<p>13 何を書くべきか</p>\n<p>low:正確さをたすか（単位、境界値,nullの扱い、invariants(変数の条件)）、high:直感を促すコメント。コードとレベルを変えて、重複を避ける</p>\n<p>コードで明らかでないことを書け.直感的にわかるように</p>\n<p>変数は使い方ではなく、それが何かをドキュメンテーションしろ。</p>\n<p>副作用や前提条件はコメントしろ。</p>\n<p>interfaceなどのハイレベルでは実装に関して触れるな</p>\n<p>読み手を想像しろ、読み手が混乱したらそれが真実、反論するな。</p>\n<p>14 命名</p>\n<p>理屈に通っているでは不十分。</p>\n<p>block：fileblock,diskblockを混同してバグになった</p>\n<p>コードを、ドキュメントを読まなくても名前だけで概念をイメージできるか</p>\n<p>名前も抽象、具体は省く。</p>\n<p>良い名前は正確かつ普遍。大体曖昧になっちゃう</p>\n<p>命名が辛かったら、リファクタリングフラグだよっと</p>\n<p>様々な箇所で使われても一定の意味を示すことが重要。コグにティブロード減らす</p>\n<p>make sure that the purpose is narrow enough that all variables with the name have the same behavior.</p>\n<p>15 先のコメント、ドキュメントをかけ</p>\n<p>あとからだと設計思想を忘れる。</p>\n<p>楽しくないから雑になる</p>\n<p>余計な実装に引きづられず、大事なことがかける。開発中にコメントも改良していける</p>\n<p>システムデザイン自体が良くなる。よくない設計に気付ける</p>\n<p>16 改良</p>\n<p>改良していくときも戦略的にやる必要がある。変更を最小にしがちだが、それは戦術的である。</p>\n<p>modifieするときも常に良いデザインがないかリファクタリングの余地がないか考えながら、それのコストを払いながら行う</p>\n<p>コメントもメンテしろ。コードの近くにコメントしろ。コミットログに書くな。</p>\n<p>重複する場合はマスターコメントにしたり、リンクにしたりしろ</p>\n<p>ハイレベルなコメントは些細な実装の変更の影響を受けるはずなくね？</p>\n<p>17 一貫性</p>\n<p>一貫性があると推測が立つし理解の手間が減るので、コグにティブロードやエンバグが減る</p>\n<p>18 読みやすい</p>\n<p>イベント駆動は呼ばれるところをインターフェースのコメントとかで書くと良い</p>\n<p>ソフトウェアは描きやすい書き方より、読みやすい書き方であるべき。ジェネリックコンテなーは読みにくい</p>\n<p>19 trend技術に関して</p>\n<p>アジャイルは戦術的プログラミングになりやすい。設計より機能開発に走りやすく複雑さが築先する。抽象をインクリメントしろ</p>\n<p>TDDもインクリメンタルで戦術的プログラミングになりやすい。抽象をデザインしろ</p>\n<p>デザインパターンには肯定的</p>\n<p>20 performanc</p>\n<p>基本はファンダメンタルな部分がパフォーマンスに効く。キャッシュ、アルゴリズム、デーア構造、ネットワークなど</p>\n<p>コードに手を入れなければならないのなら、理想を考えろ。既存のものは考えず、ミニマムでクリティカルなものだけ考え、データ構造やメソッドをまとめることをリデザインする</p>"}},"__N_SSG":true}