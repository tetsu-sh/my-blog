{"pageProps":{"post":{"title":"Rdb","date":"2022-11-20T05:35:07.322Z","slug":"rdb","content":"<h1 id=\"memo\"><a class=\"header-anchor-link\" href=\"#memo\" aria-hidden=\"true\"></a> memo</h1>\n<ul>\n<li>\n<p>json 型は推奨されない</p>\n<ul>\n<li>web api のレスポンスをそのまま保存するなど json として丸っと扱うケース。あまり update しない</li>\n<li>システムが小さい。作成し始めで変更が入る予定がある場合に柔軟性を持たせる</li>\n<li>EAV と同じデメリットを持つ.SQL が煩雑になる。INDEX が効かない。</li>\n</ul>\n</li>\n<li>\n<p>ジェイウォーク（信号無視）：配列を text 型に突っ込む</p>\n</li>\n<li>\n<p>MySQL では外部キー制約を設定している場合、外部キー制約の子テーブルを更新した際、親テーブルの共有ロックを自動的に取る。MySQL、正規化、外部キー制約注意</p>\n</li>\n<li>\n<p>外部キー(FOREIGN KEY)制約を利用している場合、<br />\n子テーブルに追加、更新や削除を行う時は、必ず親テーブルの対象の id に対して排他ロックを行ってから、更新や削除、追加を行う。</p>\n</li>\n<li>\n<p>enum,update_at</p>\n</li>\n<li>\n<p>ビジネスルールをカラム制約にするのはやりすぎなのでは？</p>\n</li>\n<li>\n<p>posgre 遅延制約.commit 時に外部きー制約が評価される。transaction 中は無視</p>\n</li>\n<li>\n<p>postgres は Select でも AccessShareLock をとる</p>\n</li>\n<li>\n<p>ネクストキーロック、ギャップロック mysql</p>\n</li>\n<li>\n<p>join が多段になりパフォーマンスが知恵化した際。安易に非正規化ではなく、マテリアライズどビューを選択肢とする</p>\n</li>\n<li>\n<p>多段マテリアライズドビューはやめましょう</p>\n</li>\n<li>\n<p>クエリの問題を分解する</p>\n</li>\n<li>\n<p>コンフィグ</p>\n<ul>\n<li>チューニングツールがある</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"sql\"><a class=\"header-anchor-link\" href=\"#sql\" aria-hidden=\"true\"></a> SQL</h2>\n<ul>\n<li>\n<p>when は評価が整合したら以降は評価しないので排他的に書く</p>\n</li>\n<li>\n<p>check with when</p>\n</li>\n</ul>\n<div class=\"code-block-container\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">update</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">set</span> salary <span class=\"token keyword\">case</span>\n  <span class=\"token keyword\">when</span> salary<span class=\"token operator\">&gt;</span><span class=\"token number\">300000</span> <span class=\"token keyword\">then</span> salary<span class=\"token operator\">*</span><span class=\"token number\">0.9</span>\n  <span class=\"token keyword\">when</span> salary<span class=\"token operator\">&gt;=</span><span class=\"token number\">250000</span> <span class=\"token operator\">and</span> salary<span class=\"token operator\">&lt;</span><span class=\"token number\">280000</span> <span class=\"token keyword\">then</span> salary<span class=\"token operator\">*</span><span class=\"token number\">1.2</span>\n<span class=\"token keyword\">else</span> salary\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">;</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token keyword\">case</span> sex <span class=\"token keyword\">when</span> <span class=\"token number\">1</span> <span class=\"token keyword\">then</span> 男 <span class=\"token keyword\">when</span> <span class=\"token number\">2</span> 女 <span class=\"token keyword\">else</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">end</span> <span class=\"token keyword\">as</span> 性別 <span class=\"token punctuation\">,</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>population<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">case</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>pref_name <span class=\"token keyword\">when</span> <span class=\"token string\">'香川'</span> <span class=\"token keyword\">then</span> populatiom <span class=\"token keyword\">else</span> <span class=\"token number\">0</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span> pref_name <span class=\"token keyword\">when</span> <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'香川'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'徳島'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'高知'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'愛媛'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> <span class=\"token string\">'四国'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> PopTbl2  <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> 性別\n</code></pre></div><h3 id=\"window-function\"><a class=\"header-anchor-link\" href=\"#window-function\" aria-hidden=\"true\"></a> window function</h3>\n<ul>\n<li>range row」」」</li>\n<li>preceding following</li>\n<li>普通の group by 集計と partition by 集計はもちろん結果が違う</li>\n<li>組み合わせ表現のための自己結合。非等値結合</li>\n<li>過ち排除の自己結合</li>\n<li>rank 関数</li>\n<li>重複行の削除</li>\n<li>not in の中に null があると答えがなくなる。not exist にする</li>\n<li>ALL でも null は悪さをする</li>\n<li>極地関数の対象が空なら null が帰ってくるので注意。coalesce して回避</li>\n<li>null orderby\n<ul>\n<li>my sql min nulls first/last, is null asc</li>\n<li>postgresql max</li>\n</ul>\n</li>\n<li>null str\n<ul>\n<li>posgre null, concat or coalesce nisuru</li>\n<li>mysql null, coalece</li>\n</ul>\n</li>\n<li>non exist 二重否定<br />\nall などよりパフォーマンスが良くなるかも</li>\n<li>集合的に考えて SQL を組み立てる</li>\n<li>having の集合の比較</li>\n</ul>\n<div class=\"code-block-container\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> class <span class=\"token keyword\">from</span> TestResult <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> class  <span class=\"token keyword\">having</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">0.75</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> score <span class=\"token operator\">&gt;=</span><span class=\"token number\">80</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">select</span> team_id<span class=\"token punctuation\">,</span> member <span class=\"token keyword\">from</span> Teams <span class=\"token keyword\">as</span> <span class=\"token keyword\">TO</span> <span class=\"token keyword\">where</span>  <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> Teams <span class=\"token keyword\">as</span> TI <span class=\"token keyword\">where</span> <span class=\"token keyword\">TO</span><span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>TI<span class=\"token punctuation\">.</span>team_id <span class=\"token operator\">and</span> TI<span class=\"token punctuation\">.</span><span class=\"token keyword\">status</span><span class=\"token operator\">&lt;&gt;</span><span class=\"token string\">'待機'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">select</span> team_id <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> team_id <span class=\"token keyword\">having</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> <span class=\"token keyword\">status</span><span class=\"token operator\">=</span><span class=\"token string\">'待機'</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">=</span>\n<span class=\"token keyword\">select</span> team_id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">status</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">'待機'</span> <span class=\"token operator\">and</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">status</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">'待機'</span> <span class=\"token keyword\">then</span> <span class=\"token string\">'ok'</span> <span class=\"token keyword\">else</span> <span class=\"token string\">'not stand by'</span> <span class=\"token keyword\">end</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">status</span> <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> team_id<span class=\"token punctuation\">;</span>\n\nバスケット解析\n<span class=\"token keyword\">select</span> shop <span class=\"token keyword\">from</span> ShopItem SI <span class=\"token keyword\">join</span> Items I <span class=\"token keyword\">on</span> SI<span class=\"token punctuation\">.</span>item<span class=\"token operator\">=</span>I<span class=\"token punctuation\">.</span>item\n<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> SI<span class=\"token punctuation\">.</span>shop <span class=\"token keyword\">having</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>SI<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> items<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">select</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&gt;</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> <span class=\"token string\">'hanukeari'</span> <span class=\"token keyword\">else</span> <span class=\"token string\">'hanuke nasi'</span> <span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">select</span> dpt <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> dpt <span class=\"token keyword\">having</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> sbmt<span class=\"token operator\">&lt;</span><span class=\"token string\">'2018-09-30'</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">select</span> shop<span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>SI<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> my_item<span class=\"token punctuation\">,</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> item <span class=\"token keyword\">from</span> Items<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>my_item <span class=\"token keyword\">from</span> ShopItems <span class=\"token keyword\">as</span> SI <span class=\"token keyword\">join</span> Items <span class=\"token keyword\">as</span> I <span class=\"token keyword\">on</span> SI<span class=\"token punctuation\">.</span>item<span class=\"token operator\">=</span>I<span class=\"token punctuation\">.</span>item <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> shop\n</code></pre></div><ul>\n<li>前年からの変化を調べる。window function</li>\n<li>window function は mysql では 8~</li>\n<li>相関サブクエリはウィンドウ関数に書き換えられるとパフォーマンス上がるかも</li>\n<li>pagenation もウィンドウ関数で？</li>\n</ul>\n<p>-　 master を（view で）作って外部結合し、行列</p>\n<div class=\"code-block-container\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> age_range<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">,</span> tblpopchanged<span class=\"token punctuation\">.</span>tohoku<span class=\"token punctuation\">,</span>tblpopchanged<span class=\"token punctuation\">.</span>kanto <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> _ <span class=\"token keyword\">from</span> TblPop <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> pref_name <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'秋田'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'青森'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> population <span class=\"token keyword\">else</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> tohoku<span class=\"token punctuation\">,</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> pref_name <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'東京'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'千葉'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> population <span class=\"token keyword\">else</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> kanto <span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> tblpopchanged\n<span class=\"token keyword\">outer</span> <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> _ <span class=\"token keyword\">from</span> TblAge <span class=\"token keyword\">cross</span> <span class=\"token keyword\">join</span> TblSex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> SexAndAge <span class=\"token keyword\">on</span> SexAndAge<span class=\"token punctuation\">.</span>age_class<span class=\"token operator\">=</span>tblpopchanged<span class=\"token punctuation\">.</span>age_class\n</code></pre></div>"}},"__N_SSG":true}