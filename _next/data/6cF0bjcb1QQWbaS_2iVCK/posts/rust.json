{"pageProps":{"post":{"title":"Rustに触ってみた","date":"2022-10-16T05:35:07.322Z","slug":"rust","content":"<ul>\n<li>Rust の勉強を少ししてみた。udemy みたり、入門 Rust プログラミングを読んだりちょろちょろ３、４ヶ月ほど</li>\n<li>『問題解決のための「アルゴリズム × 数学」が基礎からしっかり身につく本』のアルゴリズム問題を rust でやってみたりした<a href=\"https://github.com/tetsu-sh/algorithm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github/tetsu-sh/algorithm</a></li>\n<li>actix-web でちょっとしたウェブアプリを DDD 的に作ってみたりした。<a href=\"https://github.com/tetsu-sh/muscle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github/testsu-sh/muscle</a></li>\n<li>非常に勉強になる。</li>\n<li>引き続き勉強投資してく。wasm や組み込みもやっていきたい。</li>\n<li>GraphQL も試しつつローカルアプリ作成中<a href=\"https://github.com/tetsu-sh/oisource\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github/testsu-sh/oisource</a></li>\n</ul>\n<h2 id=\"%E8%87%AA%E8%BB%A2%E8%BB%8A\"><a class=\"header-anchor-link\" href=\"#%E8%87%AA%E8%BB%A2%E8%BB%8A\" aria-hidden=\"true\"></a> 自転車</h2>\n<ul>\n<li>\n<p>斜め読み</p>\n</li>\n<li>\n<p>#[repr(C)]内部表現<br />\n　- 内部表現を機に s なくて良いが、上記アトリビュートをつけると C 言語準拠隣、FFI で安全に他言語に構造体を渡せる。</p>\n</li>\n<li>\n<p>型変換</p>\n<ul>\n<li>型キャスト as\n<ul>\n<li>スカラ型同士を変換。桁あふれに注意</li>\n</ul>\n</li>\n<li>複合型の型変換\n<ul>\n<li>std::convert::From があればできる。</li>\n</ul>\n</li>\n<li>transmute\n<ul>\n<li>型情報のみ変換する。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"zero-rust\"><a class=\"header-anchor-link\" href=\"#zero-rust\" aria-hidden=\"true\"></a> zero rust</h2>\n<ul>\n<li>loop の break に値を渡すと loop の結果として渡すことができる</li>\n<li>closure はキャプチャ変数を持った環境と、その環境へのポインタと関数へのポインタを持つ。move をすると環境に元の変数から所有権が移る</li>\n<li>channel</li>\n<li>Arc,Mutex,RWRock</li>\n<li>dyn は関数テーブルへのポインタを示す</li>\n<li>スーパートレイと：トレイとを構成するトレイト。スーパートレイトを実装すればトレイトを満たす。</li>\n<li>Fn は関数型を表すトレイト、クロージャや関数は自動的にこれを実装する。</li>\n</ul>\n<h2 id=\"trpl\"><a class=\"header-anchor-link\" href=\"#trpl\" aria-hidden=\"true\"></a> TRPL</h2>\n<ul>\n<li>5</li>\n</ul>\n<h2 id=\"irorio\"><a class=\"header-anchor-link\" href=\"#irorio\" aria-hidden=\"true\"></a> irorio</h2>\n<h3 id=\"asociated-type\"><a class=\"header-anchor-link\" href=\"#asociated-type\" aria-hidden=\"true\"></a> asociated type</h3>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/beta/rust-by-example/generics/assoc_items/types.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://doc.rust-lang.org/beta/rust-by-example/generics/assoc_items/types.html</a></li>\n<li>trait に紐づけられた型</li>\n<li>trait 境界の記述がシンプルになる.Generic type との使い分け</li>\n</ul>\n<div class=\"code-block-container\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Container</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// A trait which checks if 2 items are stored inside of container.</span>\n<span class=\"token comment\">// Also retrieves first or last value.</span>\n<span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">Contains</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// Define generic types here which methods will be able to utilize.</span>\n<span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">A</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">B</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">B</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">first</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">last</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Contains</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Container</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// Specify what types `A` and `B` are. If the `input` type</span>\n<span class=\"token comment\">// is `Container(i32, i32)`, the `output` types are determined</span>\n<span class=\"token comment\">// as `i32` and `i32`.</span>\n<span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">A</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">B</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// `&amp;Self::A` and `&amp;Self::B` are also valid here.</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> number_1<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> number_2<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> number_1<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> number_2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Grab the first number.</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">first</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Grab the last number.</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">last</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">difference</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">C</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Contains</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">C</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{</span>\ncontainer<span class=\"token punctuation\">.</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> number_1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> number_2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token class-name\">Container</span><span class=\"token punctuation\">(</span>number_1<span class=\"token punctuation\">,</span> number_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Does container contain {} and {}: {}\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">&amp;</span>number_1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>number_2<span class=\"token punctuation\">,</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>number_1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>number_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First number: {}\"</span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Last number: {}\"</span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The difference is: {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">difference</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h3 id=\"future-output\"><a class=\"header-anchor-link\" href=\"#future-output\" aria-hidden=\"true\"></a> Future Output</h3>\n","coverImage":""}},"__N_SSG":true}